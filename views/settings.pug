extends layout

block content
  include mixins/_modals.pug
  include includes/showfactorycredentials
  +single-list-modal("default-hosts-config-modal", t('defaultHostsConfig'),
                      "fa-stethoscope", t('pingAddress'),
                      t('invalidAddress'), t('targetAddressesTooltip'),
                      t('defaultHosts'),
                      t('noDefaultHostsConfigured'),
                      t('defaultHostsConfigWarning'))

  +tab-lists-modal("default-dns-servers-modal", t('defaultDnsServersConfig'),
                     "fa-server", t('dnsServerAddress'),
                     t('invalidAddress'), t('dnsServerAddressTooltip'),
                     t('dnsServerAddresses'),
                     t('noDnsServerConfigured'),
                     t('defaultDnsServersConfigWarning'), "IPv4", "IPv6")

  form#config-flashman-form.needs-validation(
    method="post",
    action="/upgrade/config",
    novalidate
  )
    .row
      .col-12
        .card.mt-4.mb-4
          h4.card-header.primary-color.white-text
            .fas.fa-cog.fa-lg
            span &nbsp; #{t('Configurations')}

        .card.px-3.py-3.mb-4
          h5.card-header.primary-color.white-text(
            data-toggle="collapse",
            data-target="#general",
            style="cursor: pointer"
          )
            .row
              .col-1
                .fas.fa-chevron-down
              .col-10.text-center
                span.card-title #{t('generalConfigurations')}

          #general.card-body.collapse.out
            .row
              .col-md-6.pl-0.pr-md-4.pr-0
                .md-form.input-entry
                  label(style="pointer-events: none;")= t('minimumAmountOfPppoePaswordChars')
                  input#minlength-pass-pppoe.form-control(
                    type="number",
                    name="minlength-pass-pppoe",
                    min=1,
                    max=64,
                    required
                  )
                  .invalid-feedback= t('insertANumberBetweenMinMax', {min: 1, max: 63})
                .md-form
                  .md-selectfield.form-control.my-0
                    label(style="pointer-events: none;")= t('ignoreFlashboxFirmwwareAlterationWarning')
                    select.browser-default.md-select(name="bypass-mqtt-secret-check")
                      option(value="false")= t('No')
                      option(value="true")= t('Yes')
                .md-form
                  .md-selectfield.form-control.my-0
                    label(style="pointer-events: none;")= t('mustBlockLicenseAtDeviceRemoval')
                    select.browser-default.md-select(name="must-block-license-at-removal")
                      option(value="false")= t('No')
                      option(value="true")= t('Yes')
                .md-form
                  .md-selectfield.form-control.my-0
                    label(style="pointer-events: none;")= t('FlashmanLanguage')
                    select.browser-default.md-select(name="selected-language")
                      option(value="en") ðŸ‡¬ðŸ‡§ English
                      option(value="es") ðŸ‡ªðŸ‡¸ EspaÃ±ol
                      option(value="pt-BR") ðŸ‡§ðŸ‡· PortuguÃªs brasileiro
                .custom-control.custom-checkbox.mb-2
                  input#autoupdate.custom-control-input(
                    name="autoupdate",
                    type="checkbox"
                  )
                  label.custom-control-label.text-muted(for="autoupdate")
                    | #{t('letFLashmanAutomaticallyUpdate')}
                  .invalid-feedback
              .col-md-6.pl-0.pr-0
                .md-form.input-entry
                  label(style="pointer-events: none;")= t('opticalSignalYellowAlertDbm')
                  input#pon-signal-threshold.form-control(
                    type="number",
                    name="pon-signal-threshold",
                    min=-100,
                    max=100,
                    value=-18
                  )
                  .invalid-feedback= t('insertValidDbmNumber')
                .md-form.input-entry
                  label(style="pointer-events: none;")= t('opticalSignalRedAlertDbm')
                  input#pon-signal-threshold-critical.form-control(
                    type="number",
                    name="pon-signal-threshold-critical",
                    min=-100,
                    max=100,
                    value=-23
                  )
                  .invalid-feedback= t('insertValidDbmNumber')
                .md-form.input-entry
                  label(style="pointer-events: none;")= t('opticalSignalElevatedRedAlertDbm')
                  input#pon-signal-threshold-critical-high.form-control(
                    type="number",
                    name="pon-signal-threshold-critical-high",
                    min=-100,
                    max=100,
                    value=3
                  )
                  .invalid-feedback= t('insertValidDbmNumber')
                  .mt-3
                  .alert.alert-info
                    .fas.fa-info-circle.fa-lg
                    span &nbsp; #{t('ponSignalConfigAlsoApplyToApp')}
                .row
                  .col
                    #default-hosts-config-button.btn.btn-primary.btn-block
                      .fas.fa-stethoscope.fa-lg
                      span &nbsp; #{t('defaultHostsConfig')}
                .row.mt-3
                  .col
                    #default-dns-servers-config-button.btn.btn-primary.btn-block
                      .fas.fa-server.fa-lg
                      span &nbsp; #{t('defaultDnsServersConfig')}
            #is-ssid-prefix-enabled-col.mt-3.mb-1.d-none
              .row.alert.alert-danger
                .col-md-6.my-auto
                  .fas.fa-info-circle.fa-lg
                  span &nbsp; #{t('warningPrefixWiFi')}
                .col-md-6.my-auto
                  .md-form.input-entry#ssid-prefix-box
                    label(style="pointer-events: none;")= t('ssidPrefix')
                    input#ssid-prefix.form-control(
                      type="text",
                      name="ssid-prefix"
                      oninput="checkSsidPrefixValidity()"
                    )
                    #error-ssid-prefix.invalid-feedback= t('ssidPrefixInvalidFeedback')
                  .custom-control.custom-checkbox.mb-2
                    input#is-ssid-prefix-enabled.custom-control-input(
                      name="is-ssid-prefix-enabled",
                      type="checkbox",
                    )
                    label.custom-control-label.text-muted(for="is-ssid-prefix-enabled")
                      | #{t('enableSsidPrefixInCpesWifi')}
                    .invalid-feedback

          h5.card-header.primary-color.white-text.mt-2(
            data-toggle="collapse",
            data-target="#speed-measurement",
            style="cursor: pointer"
          )
            .row
              .col-1
                .fas.fa-chevron-down
              .col-10.text-center
                span.card-title= t('speedMeasureServerConfigurations')
          #speed-measurement.card-body.collapse.out
            .md-form.input-entry
              label(style="pointer-events: none;")= t('speedMeasureServerIpAddress')
              input#measure-server-ip.form-control.ip-mask-field(
                type="text",
                name="measure-server-ip",
                minlength=7,
                maxlength=15,
                size=15,
                pattern="^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
              )
              .invalid-feedback= t('insertValidIp')
            .md-form.input-entry
              label(style="pointer-events: none;")= t('speedMeasureServerPort')
              input#measure-server-port.form-control(
                type="number",
                name="measure-server-port",
                min=1,
                max=65535,
                value=80,
                placeholder="80"
              )
              .invalid-feedback= t('insertValidPort')

          h5.card-header.primary-color.white-text.mt-2(
            data-toggle="collapse",
            data-target="#technicianapp",
            style="cursor: pointer"
          )
            .row
              .col-1
                .fas.fa-chevron-down
              .col-10.text-center
                span.card-title= t('technicianAppConfigurations')

          #technicianapp.card-body.collapse.out
            .row
              .col-md-6.col-12.pl-0.pr-md-4.pr-0
                .md-form
                  .md-selectfield.form-control.my-0
                    label(style="pointer-events: none;")= t('mandatoryWanVerification')
                    select.browser-default.md-select(name="wan-step-required")
                      option(value="true")= t('Enabled')
                      option(value="false")= t('Disabled')
                .md-form
                  .md-selectfield.form-control.my-0
                    label(style="pointer-events: none;")= t('mandatoryFlashmanRegisterVerification')
                    select.browser-default.md-select(name="flashman-step-required")
                      option(value="true")= t('Enabled')
                      option(value="false")= t('Disabled')
                .alert.alert-info
                  .fas.fa-info-circle.fa-lg
                  span &nbsp; #{t('disabledWanStepWillBePingTestToCpeGateway')}
                .alert.alert-info
                  .fas.fa-info-circle.fa-lg
                  span &nbsp; #{t('disabledFlashmanRegisterStepWillBeMqttsConnectionTest')}
                if (superuser || (role && role.grantMonitorManage))
                  .row
                    .col
                      #factory-credentials-button.btn.btn-primary.btn-block
                        .fas.fa-key.fa-lg
                        span &nbsp; #{t('factoryCredentialsPresetLabel')}
              .col-md-6.col-12.pl-0.pr-0
                .md-form
                  .md-selectfield.form-control.my-0
                    label(style="pointer-events: none;")= t('speedTestExecution')
                    select.browser-default.md-select(name="speedtest-step-required")
                      option(value="true")= t('Enabled')
                      option(value="false")= t('Disabled')
                .md-form
                  .md-selectfield.form-control.my-0
                    label(style="pointer-events: none;")= t('mandatoryIpvxVerification', {x: 4})
                    select.browser-default.md-select(name="ipv4-step-required")
                      option(value="true")= t('Enabled')
                      option(value="false")= t('Disabled')
                .md-form
                  .md-selectfield.form-control.my-0
                    label(style="pointer-events: none;")= t('mandatoryIpvxVerification', {x: 6})
                    select.browser-default.md-select(name="ipv6-step-required")
                      option(value="false")= t('Disabled')
                      option(value="true")= t('Enabled')
                .md-form
                  .md-selectfield.form-control.my-0
                    label(style="pointer-events: none;")= t('mandatoryDnsVerification')
                    select.browser-default.md-select(name="dns-step-required")
                      option(value="true")= t('Enabled')
                      option(value="false")= t('Disabled')
                .custom-control.custom-checkbox
                  input#specific-app-technician-web-login.custom-control-input(
                    name="specific-app-technician-web-login",
                    type="checkbox",
                  )
                  label.custom-control-label.text-muted(for="specific-app-technician-web-login")
                    | #{t('enableSpecificAppTechnicianWebLogin')}
                  .invalid-feedback
                .alert.alert-info.mt-2
                  .fas.fa-info-circle.fa-lg
                  span &nbsp; #{t('explanationOfEnableSpecificAppTechnicianWebLogin')}

          if (superuser || (role && role.grantMonitorManage))
            h5.card-header.primary-color.white-text.mt-2(
              data-toggle="collapse",
              data-target="#tr",
              style="cursor: pointer"
            )
              .row
                .col-1
                  .fas.fa-chevron-down
                .col-10.text-center
                  span.card-title= t('tr069Configurations')
            #tr.card-body.collapse.out
              .row
                .col-md-6.col-12.pl-0.pr-md-4.pr-0
                  .md-form.input-entry
                    label(style="pointer-events: none;")= t('flashmansTr069ServerFqdn')
                    input#tr069-server-url.form-control(
                      type="text",
                      name="tr069-server-url"
                    )
                    .invalid-feedback= t('insertValidFqdn')
                  .md-form.input-entry
                    label(style="pointer-events: none;")= t('cpesWebinterfaceLogin')
                    input#onu-web-login.form-control(
                      type="text",
                      name="onu-web-login",
                      oninput="checkLoginWebInterface()"
                    )
                    #error-onu-web-login.invalid-feedback= t('insertValidLogin')
                  .md-form.input-group
                    label(style="pointer-events: none;")= t('cpesWebinterfacePassword')
                    input#onu-web-password.form-control.px-0(
                      type="text",
                      name="onu-web-password",
                      oninput="checkPasswordWebInterface()"
                    )
                    .input-group-append(
                      data-toggle="tooltip",
                      title=t('onuWebPasswordTooltip')
                    )
                      a.md-addon.fas.fa-question-circle
                    #error-onu-web-password.invalid-feedback= t('insertValidPassword')


                  //- TR-069 connection login
                  .md-form.input-group
                    //- Login label
                    label(style="pointer-events: none;")= t('cpesTR069ConnectionLogin')

                    //- Login input
                    input#tr069-connection-login.form-control.px-0(
                      type="text",
                      name="tr069-connection-login",
                      oninput="checkTR069ConnectionFields()"
                    )

                    //- Login tooltip
                    .input-group-append(
                      data-toggle="tooltip",
                      title=t('tr069ConnectionFieldTooltip')
                    )
                      a.md-addon.fas.fa-question-circle

                    //- Login input error message
                    #error-tr069-connection-login.invalid-feedback= t('insertValidLogin')

                  //- TR-069 connection password
                  .md-form.input-group
                    //- Password label
                    label(style="pointer-events: none;")= t('cpesTR069ConnectionPassword')

                    //- Password input
                    input#tr069-connection-password.form-control.px-0(
                      type="text",
                      name="tr069-connection-password",
                      oninput="checkTR069ConnectionFields()"
                    )

                    //- Password tooltip
                    .input-group-append(
                      data-toggle="tooltip",
                      title=t('tr069ConnectionFieldTooltip')
                    )
                      a.md-addon.fas.fa-question-circle

                    //- Password input error message
                    #error-tr069-connection-password.invalid-feedback= t('insertValidPassword')


                  span &nbsp;
                  .custom-control.custom-checkbox
                    input#onu_web_remote.custom-control-input(
                      name="onu_web_remote",
                      type="checkbox"
                    )
                    label.custom-control-label.text-muted(for="onu_web_remote")
                      | #{t('configureOnusRemoteAccess')}
                    .invalid-feedback
                  if (showTR069Stun)
                    .custom-control.custom-checkbox.mt-2
                      input#stun_enable.custom-control-input(
                        name="stun_enable",
                        type="checkbox"
                      )
                      label.custom-control-label.text-muted.mr-2(for="stun_enable")
                        | #{t('enableStunServerUsage')}
                      a.fas.fa-question-circle(data-toggle="tooltip" title=t('stunEnableTooltip'))
                      .invalid-feedback
                  if (showTR069HTTP)
                    .custom-control.custom-checkbox.mt-2
                      input#insecure_enable.custom-control-input(
                        name="insecure_enable",
                        type="checkbox"
                      )
                      label.custom-control-label.text-muted.mr-2(for="insecure_enable")
                        | #{t('enableTr069HttpCommunicationMode')}
                      a.fas.fa-question-circle(data-toggle="tooltip" title=t('tr069HttpCommunicationTooltip'))
                      .invalid-feedback
                .col-md-6.col-12.pl-0.pr-0.text-center
                  .md-form.input-entry
                    label(style="pointer-events: none;")= t('tr069InformIntervalSeconds')
                    input#inform-interval.form-control(
                      type="number",
                      name="inform-interval",
                      min=60,
                      max=86400,
                      value=300,
                      placeholder="300"
                    )
                    .invalid-feedback= t('tr069InformIntervalInvalidFeedback')
                  .md-form.input-entry
                    label(style="pointer-events: none;")= t('tr069DataSynchronizationIntervalSeconds')
                    input#sync-interval.form-control(
                      type="number",
                      name="sync-interval",
                      min=60,
                      max=86400,
                      value=300,
                      placeholder="300"
                    )
                    .invalid-feedback= t('tr069DataSynchronizationIntervalInvalidFeedback')
                  .md-form.input-entry
                    label(style="pointer-events: none;")= t('lostInformsForUnstableCpe')
                    input#lost-informs-recovery-threshold.form-control(
                      type="number",
                      name="lost-informs-recovery-threshold",
                      min=1,
                      max=100,
                      value=1,
                      oninput="checkrecoveryOfflineInputDependency()"
                    )
                    #error-lost-informs-recovery-threshold.invalid-feedback= t('lostInformsInvalidFeedback')
                  .md-form.input-entry
                    label(style="pointer-events: none;")= t('lostInformsForOfflineCpe')
                    input#lost-informs-offline-threshold.form-control(
                      type="number",
                      name="lost-informs-offline-threshold",
                      min=1,
                      max=300,
                      value=3,
                      oninput="checkrecoveryOfflineInputDependency()"
                    )
                    //- don't change min value to '2'. oninput function will check if this value is bigger than recovery's value.
                    #error-lost-informs-offline-threshold.invalid-feedback= t('lostInformsInvalidFeedback')
                  #error-recovery-offline-thresholds.invalid-feedback= t('lostInformsRecoveryOfflineThresholdsInvalidFeedback')
                  .alert.alert-danger
                    .fas.fa-exclamation-triangle.fa-lg
                    span &nbsp; #{t('warningLargeLoadFlashman')}
                    .row
                      #offline-cpe-force-reconnect.button.btn.btn-primary.mt-4.mx-auto
                        .fas.fa-sync.fa-lg
                        span &nbsp; #{t('forceOfflineReconnect')}

          button.btn.btn-primary.mt-4.mx-auto(type="submit")
            .fas.fa-check.fa-lg
            span &nbsp; #{t('Save')}

block scripts
  script(src='/dist/settings.bundle.js')
