#!/usr/bin/env node

/* eslint require-jsdoc: 0 */

/**
 * Module dependencies.
 */

require('./globals.js');
let app = require('../app');
let mqtts = require('../mqtts');
let sio = require('../sio');
let debug = require('debug')('flashman:server');
const http = require('http');
const https = require('https');
const fs = require('fs');
const tls = require('tls');

/* APP */

/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.FLM_WEB_PORT || '8000');
port = port + parseInt(process.env.NODE_APP_INSTANCE);
app.set('port', port);

/**
 * Create HTTP server.
 */
let server;
if (process.env.USE_HTTPS_SERVER_DIR) {
  const options = {
    key: fs.readFileSync(process.env.USE_HTTPS_SERVER_DIR + '/key.pem'),
    cert: fs.readFileSync(process.env.USE_HTTPS_SERVER_DIR + '/cert.pem'),
  };
  server = https.createServer(options, app);
} else {
  server = http.createServer(app);
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// Attach socket.io messages to the server
if (process.env.FLM_USE_MQTT_PERSISTENCE) {
  Promise.all([sio.pubClient.connect(), sio.subClient.connect()]).then(() => {
    sio.listen(server);
  });
} else {
  sio.listen(server);
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/* MQTTS */
let mqttsPort = 1883;
let mqttsOptions;
let mqttServer;

function getDomainACMECerts(acme, domainName) {
  let opts;
  try {
    let acmefs = fs.readFileSync(acme);
    let acmeJsonParams = JSON.parse(acmefs);
    let certs = acmeJsonParams.DomainsCertificate.Certs;
    let i = 0;
    while (i<certs.length && opts === undefined) {
      if (certs[i].Certificate.Domain == domainName) {
        let keybuff = Buffer.from(certs[i].Certificate.PrivateKey, 'base64');
        let certbuff = Buffer.from(certs[i].Certificate.Certificate, 'base64');
        opts = tls.createSecureContext({
          key: keybuff.toString('ascii'),
          cert: certbuff.toString('ascii'),
        });
      }
      i++;
    }
  } catch (err) {
    if (err.code === 'ENOENT') {
      console.log('ACME file not found!');
    } else if (err.code === 'EACCES') {
      console.log('Cannot open ACME file!');
    } else {
      throw err;
    }
  }

  if (opts === undefined) {
    console.log('No Certificate found for domain!');
  } else {
    console.log('Using Certificate for domain ' +
                domainName + ' from ACME file');
  }

  return opts;
}

function getFileCerts(KeyDir) {
  let opts;
  try {
    opts = tls.createSecureContext({
        key: fs.readFileSync(KeyDir + '/key.pem'),
        cert: fs.readFileSync(KeyDir + '/cert.pem'),
    });
  } catch (err) {
    if (err.code === 'ENOENT') {
      console.log('MQTT KEY or CERT file not found!');
    } else if (err.code === 'EACCES') {
      console.log('Cannot open MQTT KEY or CERT file!');
    } else {
      throw err;
    }
  }

  if (opts === undefined) {
    console.log('No Certification files found!');
  } else {
    console.log('Using KEY and CERT files from ' + KeyDir + '!');
  }

  return opts;
}

function restartWatcher(interval, filename) {
  fs.unwatchFile(filename);
  watchChangeCert(interval, filename, false);
}

function watchChangeCert(interval, filename, needrestart) {
  fs.watchFile(filename + '/cert.pem', {interval: interval},
  (current, previous) => {
    if (current.mtime > previous.mtime) {
      console.log('Certificate file ' + filename +
        '/cert.pem Changed. Reloading MQTTS Certificates...');
      let opts = getFileCerts(filename);
      if (opts) {
        mqttsOptions = opts;
        if (!mqttServer) {
          console.log('Using MQTT Server with TLS (MQTTS)');
          mqttServer = tls.createServer( {
            SNICallback: (servername, cb) => {
              cb(null, mqttsOptions);
            }}, mqtts.handle);
          mqttServer.listen(mqttsPort, function() {
            console.log('MQTT started and listening on port ' +
              mqttsPort.toString());
          });
        }
        if (needrestart) {
          restartWatcher(3600000, filename);
        }
      } else {
        console.log('Error reading file certificates! Using old ones...');
      }
    };
  });
}

// Embedded MQTT server
if (process.env.FLM_MQTT_PORT) {
  mqttsPort = parseInt(process.env.FLM_MQTT_PORT) +
              parseInt(process.env.NODE_APP_INSTANCE);
} else {
  let mqttsJsonParams = {};
  try {
    let fileContents = fs.readFileSync('./mqtts-port.json', 'utf8');
    mqttsJsonParams = JSON.parse(fileContents);
  } catch (err) {
    if (err.code === 'ENOENT') {
      console.log('Mqtt parameter file not found! Using port default 1883');
      mqttsJsonParams['port'] = mqttsPort;
    } else if (err.code === 'EACCES') {
      console.log('Cannot open mqtt parameter file! Using port default 1883');
      mqttsJsonParams['port'] = mqttsPort;
    } else {
      throw err;
    }
  }
  mqttsPort = parseInt(mqttsJsonParams.port) +
              parseInt(process.env.NODE_APP_INSTANCE);
}

let mqttsDomain = '';
let mqttSecure = false;
let mqttExternalFilesCRT = false;
let mqttExternalFilesACME = false;
if (process.env.FLM_MQTTS_DOMAIN) {
  mqttsDomain = process.env.FLM_MQTTS_DOMAIN;
} else {
  console.log('Domain not found for MQTTS, set FLM_MQTTS_DOMAIN!');
}

if (mqttsDomain != '' && process.env.FLM_ACME_FILE) {
  mqttsOptions = getDomainACMECerts(process.env.FLM_ACME_FILE, mqttsDomain);

  // even if the certs are not found, force the creation of new one...
  mqttExternalFilesACME = true;
  mqttSecure = true;
} else {
  console.log('ACME file not specified!');
  if (process.env.FLM_CERT_MQTT_DIR) {
    mqttsOptions = getFileCerts(process.env.FLM_CERT_MQTT_DIR);
    mqttExternalFilesCRT = true;
    mqttSecure = true;
  } else {
    console.log('MQTT Certificate directory not specified!');
  }
}

if (mqttSecure) {
  if (mqttsOptions) {
      console.log('Using MQTT Server with TLS (MQTTS)');
      mqttServer = tls.createServer( {
        SNICallback: (servername, cb) => {
          cb(null, mqttsOptions);
        }}, mqtts.handle);
  }
} else {
  console.log('Using normal MQTT (not secure)');
  mqttServer = require('net').createServer(mqtts.handle);
}

if (mqttServer) {
  mqttServer.listen(mqttsPort, function() {
    console.log('MQTT started and listening on port ' + mqttsPort.toString());
  });
}


if (mqttSecure) {
  // Install a watcher for file changes
  // Restart the service when certificate changes
  if (mqttExternalFilesCRT) {
    if (!mqttsOptions) {
      if (!fs.existsSync(process.env.FLM_CERT_MQTT_DIR)) {
        console.log('Creating certificate directory ' +
          process.env.FLM_CERT_MQTT_DIR + ' ...');
        fs.mkdirSync(process.env.FLM_CERT_MQTT_DIR);
        fs.closeSync(fs.openSync(process.env.FLM_CERT_MQTT_DIR +
          '/cert.pem', 'w'));
        fs.closeSync(fs.openSync(process.env.FLM_CERT_MQTT_DIR +
          '/key.pem', 'w'));
      }
    }

    console.log('Watching for file changes on '+process.env.FLM_CERT_MQTT_DIR +
      '/cert.pem');
    // If we do not have a key, wait for the key to start the server
    // If we have a key, look every hour for changes
    if (mqttServer) {
      watchChangeCert(3600000, process.env.FLM_CERT_MQTT_DIR, false);
    } else {
      watchChangeCert(100, process.env.FLM_CERT_MQTT_DIR, true);
    }
  } else if (mqttExternalFilesACME) {
    console.log('Watching for file changes on ACME file ' +
                process.env.FLM_ACME_FILE);
    fs.watch(process.env.FLM_ACME_FILE, (event, filename) => {
      if (filename && event ==='change') {
        console.log('Certificate file ' + filename +
                    ' Changed. Reloading MQTTS Certificates...');
        let opts = getDomainACMECerts(process.env.FLM_ACME_FILE, mqttsDomain);
        if (opts) {
          mqttsOptions = opts;
          if (!mqttServer) {
            console.log('Using MQTT Server with TLS (MQTTS)');
            mqttServer = tls.createServer( {
              SNICallback: (servername, cb) => {
                cb(null, mqttsOptions);
              }}, mqtts.handle);
            mqttServer.listen(mqttsPort, function() {
              console.log('MQTT started and listening on port ' +
                          mqttsPort.toString());
            });
          }
        } else {
          console.log('Error getting new certificates! Using old ones...');
        }
      }
    });
  }
}

if (process.env.FLM_TEMPORARY_MQTT_BROKER_PORT) {
  console.log();
  let mqttServerTmp = require('net').createServer(mqtts.handle);
  mqttServerTmp.listen(
    process.env.FLM_TEMPORARY_MQTT_BROKER_PORT, function() {
      console.log('Using a TEMPORARY INSECURE MQTT server on port ' +
                  process.env.FLM_TEMPORARY_MQTT_BROKER_PORT);
  });
}
