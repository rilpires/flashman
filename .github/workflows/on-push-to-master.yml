name: Deploy to master

on:
  push:
    branches: [ master ]

jobs:
  On-push-to-master:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.ANLIXBOT_SECRET }}

      - name: Getting branch version
        run: |
          BRANCH=${GITHUB_REF##*/}
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV

      - name: Get Branch Attributes
        run: |
          SUFFIX=""
          COMMIT_BRANCH=test/$GITHUB_REF_NAME
          case $GITHUB_REF_NAME in
            main) COMMIT_BRANCH="prod";;
            master) COMMIT_BRANCH="prod";;
            alpha) SUFFIX="A";;
            beta) SUFFIX="B";;
          esac
          echo "SUFFIX=$SUFFIX" >> $GITHUB_ENV
          echo "COMMIT_BRANCH=$COMMIT_BRANCH" >> $GITHUB_ENV

      - name: Getting latest version & check if version is available
        run: |
          VERSION=$(cat ./RELEASE_NOTES.json | jq -r .latest_version)       
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Evaluating docker image tag
        run: |
          [ ${{ env.BRANCH        }} == alpha ] && DOCKER_TAG=alpha  ;\
          [ ${{ env.COMMIT_BRANCH }} == prod ]  && DOCKER_TAG=latest ;\
          echo "DOCKER_TAG=$DOCKER_TAG" >> $GITHUB_ENV

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with: 
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies & run tests
        run: |
          npm install
          npm test

      - name: Creating release notes, bump package version, creating & pushing Git tag
        run: |
          VERSION="${{ env.VERSION }}"

          echo "Notas da versÃ£o $VERSION do Flashman" > notes.txt
          echo "   " >> notes.txt

          HAS_FIRM=$(cat ./RELEASE_NOTES.json | jq -r '."'$VERSION'".custom_firmware_compatibilities | any')
          HAS_TR69=$(cat ./RELEASE_NOTES.json | jq -r '."'$VERSION'".tr069_compatibilities | any')
          if [ "$HAS_FIRM" == "true" ] || [ "$HAS_TR69" == "true" ]; then
            echo "Compatibilidades:" >> notes.txt
            cat ./RELEASE_NOTES.json | jq -r '."'$VERSION'".custom_firmware_compatibilities[] | "- " + .' >> notes.txt
            cat ./RELEASE_NOTES.json | jq -r '."'$VERSION'".tr069_compatibilities[] | "- " + .' >> notes.txt
          fi

          HAS_FIXES=$(cat ./RELEASE_NOTES.json | jq -r '."'$VERSION'".fixes | any')
          if [ "$HAS_FIXES" == "true" ]; then
            echo "Consertos:" >> notes.txt
            cat ./RELEASE_NOTES.json | jq -r '."'$VERSION'".fixes[] | "- " + .' >> notes.txt
          fi

          HAS_IMPROVEMENTS=$(cat ./RELEASE_NOTES.json | jq -r '."'$VERSION'".improvements | any')
          if [ "$HAS_IMPROVEMENTS" == "true" ]; then
            echo "Melhorias:" >> notes.txt
            cat ./RELEASE_NOTES.json | jq -r '."'$VERSION'".improvements[] | "- " + .' >> notes.txt
          fi

          HAS_FEATURES=$(cat ./RELEASE_NOTES.json | jq -r '."'$VERSION'".features | any')
          if [ "$HAS_FEATURES" == "true" ]; then
            echo "Funcionalidades:" >> notes.txt
            cat ./RELEASE_NOTES.json | jq -r '."'$VERSION'".features[] | "- " + .' >> notes.txt
          fi

          # Bump version on package json
          cat ./package.json | jq -r '. | .version = "'$VERSION'"' > ./package.json.tmp
          mv ./package.json.tmp ./package.json

          # Generate dist files
          npm run build

          git config --global user.email anlixbot@users.noreply.github.com
          git config --global user.name "anlixbot"
          git add ./package.json
          git add ./public/dist
          git commit -m "[skip ci] Version bumped on package.json and generated dist files"
          git push
          git tag -a "$VERSION${{ env.SUFFIX }}" -m "$(cat notes.txt)"
          git push origin $VERSION${{ env.SUFFIX }}

      - name: Building docker image & pushing
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            anlixhub/flashman:${{ env.VERSION }}${{ env.SUFFIX }},
            anlixhub/flashman:${{ env.DOCKER_TAG }}

      - name: Update Version Management
        run: |
          curl -s -X PUT \
            'https://versionmanagement.anlix.io/api/v1/microservice' \
            -H 'Accept: */*' \
            -H 'Content-Type: application/json' \
            -H 'X-AIX-SECRET: ${{ secrets.AIX_VERSION_MANAGEMENT_SECRET }}' \
            -d '{"name": "'$GITHUB_REPOSITORY'", "branch": "${{ env.BRANCH }}", "version": "${{ env.VERSION }}${{ env.SUFFIX }}"}'

      - name: Dispatch version notification to dependent docker acs repository
        run: |
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.ANLIXBOT_SECRET }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/anlix-io/docker-genieacs/actions/workflows/dispatch.yml/dispatches \
            -d '{"ref": "master"}'
